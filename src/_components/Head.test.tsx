import { expect, test } from "vitest";
import { decodeHTML } from "entities";
import { renderToStaticMarkup } from "react-dom/server";
import { Head } from "./Head";
import { HeadSchema } from "../../eleventy";

const defaultProps = {
  title: "Breathe Easy Sheffield",
  description:
    "Covid-safer events and guidance for event organisers. Clean air equipment lending and safety tools to reduce the risks of airborne illness for everyone.",
  socialImage: "/static/img/ogimage-default.png",
  socialImageAlt: "Breath Easy's logo",
};

test("Head produces title metadata", async () => {
  const data = {
    baseUrl: "https://example.com",
    title: "snazzy website",
    page: { url: "/" },
    eleventy: { generator: "elventy" },
  };

  const result = Head(HeadSchema.parse(data));
  document.body.innerHTML = decodeHTML(renderToStaticMarkup(result));

  expect(document.querySelector("title").textContent).toEqual(data.title);
  expect(document.querySelector("meta[name='title']").content).toEqual(
    data.title,
  );
  expect(document.querySelector("meta[property='og:title']").content).toEqual(
    data.title,
  );
});

test("social image is present and has alt text", async () => {
  const data = {
    baseUrl: "https://example.com",
    title: "snazzy website",
    page: { url: "/" },
    eleventy: { generator: "elventy" },
  };

  const result = Head(HeadSchema.parse(data));
  document.body.innerHTML = decodeHTML(renderToStaticMarkup(result));

  expect(document.querySelector("meta[property='og:image']").content).toEqual(
    data.baseUrl + defaultProps.socialImage,
  );
  expect(
    document.querySelector("meta[property='og:image:alt']").content,
  ).toEqual(defaultProps.socialImageAlt);
});

test("link metadata exists", async () => {
  const data = {
    title: "snazzy website",
    page: { url: "/" },
    eleventy: { generator: "elventy" },
  };

  const result = Head(HeadSchema.parse(data));
  document.body.innerHTML = decodeHTML(renderToStaticMarkup(result));

  expect(document.querySelector("meta[property='og:url']")?.content).toEqual(
    "/",
  );
  expect(document.querySelector("link[rel='canonical']").href).toEqual(
    "http://localhost:3000/", // generated by host enviroment
  );
});

test("description metadata exists", async () => {
  const data = {
    baseUrl: "https://example.com",
    title: "snazzy website",
    page: { url: "/" },
    eleventy: { generator: "elventy" },
  };

  const result = Head(HeadSchema.parse(data));
  document.body.innerHTML = decodeHTML(renderToStaticMarkup(result));
  expect(document.querySelector("meta[name='description']").content).toEqual(
    defaultProps.description,
  );
  expect(
    document.querySelector("meta[property='og:description']").content,
  ).toEqual(defaultProps.description);
});

test("Head produces generator metadata", async () => {
  const data = {
    baseUrl: "https://example.com",
    title: "snazzy website",
    page: { url: "/" },
    eleventy: { generator: "elventy" },
  };

  const result = Head(HeadSchema.parse(data));
  document.body.innerHTML = decodeHTML(renderToStaticMarkup(result));

  expect(document.querySelector("meta[name='generator']").content).toEqual(
    data.eleventy.generator,
  );
});
